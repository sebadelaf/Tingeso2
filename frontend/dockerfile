# Dockerfile para el Frontend React/Vite (KarRM) usando Multi-Stage Build

# --- Etapa 1: Construcción (Builder) ---
# Usamos una imagen de Node.js (v20 LTS) basada en Alpine (más ligera)
# Le damos un nombre a esta etapa: 'builder'
FROM node:20-alpine AS builder

# Establecemos el directorio de trabajo dentro de la imagen
WORKDIR /app

# Copiamos package.json y package-lock.json PRIMERO
# Docker cachea este paso, si no cambian, no reinstala todo cada vez
COPY package.json package-lock.json ./

# Instalamos las dependencias de producción y desarrollo de forma limpia
# 'npm ci' usa package-lock.json para instalaciones deterministas
RUN npm ci

# Copiamos el RESTO del código fuente de la aplicación
# (node_modules será ignorado gracias a .dockerignore)
COPY . .

# Ejecutamos el comando de build para generar la carpeta /app/dist
RUN npm run build

# --- Etapa 2: Servidor Final (Nginx) ---
# Usamos una imagen oficial y ligera de Nginx basada en Alpine
FROM nginx:stable-alpine

# Copiamos los archivos estáticos construidos en la etapa 'builder'
# desde la carpeta /app/dist (del builder) hacia la carpeta por defecto
# donde Nginx sirve archivos (/usr/share/nginx/html).
COPY --from=builder /app/dist /usr/share/nginx/html

# Exponemos el puerto 80, que es el puerto por defecto donde escucha Nginx
EXPOSE 80

# El comando por defecto de la imagen nginx ya inicia el servidor.
# Podemos añadir este CMD para asegurar que corre en primer plano (necesario para Docker).
CMD ["nginx", "-g", "daemon off;"]

# Nota: Para Single Page Applications (SPA) como React, podrías necesitar
# copiar una configuración personalizada de Nginx aquí para que maneje
# correctamente las rutas del frontend (ej. redirigir todo a index.html).
# Por ahora, lo dejamos simple.
# COPY nginx.conf /etc/nginx/conf.d/default.conf